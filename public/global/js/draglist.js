// Generated by CoffeeScript 1.3.3
(function() {

  KISSY.add("widget/draglist", function(S, DOM, Node, Event, DragSwitch) {
    var $, DragList, defaultConfig;
    $ = S.all;
    defaultConfig = {
      enableScrollView: true,
      enableDragSwitch: true,
      enableTapHold: true,
      dragSwitchConfig: {
        maxDistance: -100,
        validDistance: -30,
        leftClass: "entry-list-item-left",
        rightClass: "entry-list-item-right"
      },
      tapHoldConfig: {
        shownClass: 'entry-list-edit-show'
      }
    };
    return DragList = (function() {

      function DragList(wrapperEl, config) {
        this.wrapperEl = wrapperEl;
        this.config = config;
        this.wrapperEl = $(this.wrapperEl);
        this.config = S.merge(defaultConfig, this.config, true);
        this.dragSwitchConfig = this.config.dragSwitchConfig;
        this.tapHoldConfig = this.config.tapHoldConfig;
        this.init();
      }

      DragList.prototype.init = function() {
        if (this.config.enableScrollView) {
          this.initScrollView();
        }
        if (this.config.enableDragSwitch) {
          this.initDragSwitch();
        }
        if (this.config.enableTapHold) {
          return this.initTapHold();
        }
      };

      DragList.prototype.initScrollView = function() {
        var _this = this;
        this.scrollView = new DragSwitch(".entry-list-box", {
          senDistance: 1,
          inertiaMove: false,
          binds: [
            {
              moveEls: [],
              maxDistance: DOM.viewportHeight() / 2,
              validDistance: 1,
              passCallback: function() {},
              failCallback: null,
              checkvalid: null
            }, null, {
              moveEls: [],
              maxDistance: -DOM.viewportHeight() / 2,
              validDistance: -1,
              passCallback: function() {},
              failCallback: null,
              checkvalid: null
            }, null
          ]
        });
        this.scrollView.on("dragDownEnd", function(ev) {
          var box, matrix;
          box = _this.realEl;
          matrix = _this.scrollView.getMatrix(box);
          matrix = _this.scrollView.parseMartix(matrix);
          if (matrix[5] > 0) {
            return box[0].style.webkitTransform = "";
          }
        });
        return this.scrollView.on("dragUpEnd", function(ev) {
          var box, height, matrix;
          box = _this.realEl;
          matrix = _this.scrollView.getMatrix(box);
          matrix = _this.scrollView.parseMartix(matrix);
          height = -box.height() + DOM.viewportHeight();
          if (matrix[5] < height) {
            return _this.scrollView.setMatrix(box, _this.scrollView.translate("matrix(1,0,0,1,0,0)", height, 0));
          }
        });
      };

      DragList.prototype.initDragSwitch = function() {
        var _this = this;
        this.dragSwitch = new DragSwitch(".ks-draglist-item-slide", {
          senDistance: 3,
          binds: [
            null, {
              moveEls: [],
              maxDistance: -30,
              validDistance: -30,
              passCallback: function(ev) {
                return $(ev.self.originalEl)[0].style.webkitTransform = "";
              },
              failCallback: null,
              checkvalid: function(ev) {
                return true;
              }
            }, null, {
              moveEls: [],
              maxDistance: 30,
              validDistance: 30,
              passCallback: function(ev) {
                return $(ev.self.originalEl)[0].style.webkitTransform = "";
              },
              failCallback: null,
              checkvalid: function(ev) {
                return true;
              }
            }
          ]
        });
        this.wrapperEl.on("touchstart", function() {
          return $('.ks-draglist-item-slide').removeClass("entry-list-item-right entry-list-item-left");
        });
        return this.dragSwitch.on("dragLeft dragRight", function(e) {
          if (e.self.key === 1 && e.self.distance > 0) {
            e.self.isSendStart = false;
            e.self.eventType = "dragRight";
            e.self.key = 3;
            return e.self.effectBind = e.self.config.binds[e.self.key];
          } else if (e.self.key === 3 && e.self.distance < 0) {
            e.self.isSendStart = false;
            e.self.eventType = "dragLeft";
            e.self.key = 1;
            return e.self.effectBind = e.self.config.binds[e.self.key];
          }
        });
      };

      DragList.prototype.initTapHold = function() {
        var moveCount, tapHoldHandler, timer,
          _this = this;
        this.isTapHolding = false;
        tapHoldHandler = function(ev) {
          return $(ev.target).fire('tapHold2', ev);
        };
        timer = null;
        moveCount = 0;
        this.wrapperEl.on("touchstart", function(ev) {
          moveCount = 0;
          clearTimeout(timer);
          return timer = setTimeout(function() {
            return tapHoldHandler.call(_this, ev);
          }, 1000);
        });
        this.wrapperEl.on("touchend", function() {
          return clearTimeout(timer);
        });
        this.wrapperEl.on("touchmove", function() {
          moveCount++;
          console.log(moveCount);
          if (moveCount > 10) {
            return clearTimeout(timer);
          }
        });
        this.wrapperEl.delegate("tapHold2", ".ks-draglist-item", function(ev) {
          var el;
          el = $(ev.currentTarget);
          el.addClass(_this.tapHoldConfig.shownClass);
          return _this.isTapHolding = true;
        });
        return this.wrapperEl.on("touchstart", function() {
          if (_this.isTapHolding) {
            return $(".ks-draglist-item").removeClass(_this.tapHoldConfig.shownClass);
          }
        });
      };

      return DragList;

    })();
  }, {
    requires: ["dom", "node", "event", "widget/dragswitch"]
  });

}).call(this);
